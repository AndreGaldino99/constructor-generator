using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace SourceGenerator
{
    [Generator]
    public class ConstrutorGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classProvider = context.SyntaxProvider.CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax cds && cds.Modifiers.Any(m => m.ValueText == "partial"),
                transform: (ctx, _) =>
                {
                    var cds = (ClassDeclarationSyntax)ctx.Node;
                    var symbol = ctx.SemanticModel.GetDeclaredSymbol(cds);
                    return symbol as INamedTypeSymbol;
                }
            ).Where(s => s != null);

            context.RegisterSourceOutput(classProvider, (spc, classSymbol) =>
            {
                if (classSymbol is null) return;

                var properties = classSymbol.GetMembers()
                    .OfType<IPropertySymbol>()
                    .Where(p => p.SetMethod != null && p.SetMethod.DeclaredAccessibility == Accessibility.Public)
                    .ToList();

                if (!properties.Any()) return;

                var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
                var className = classSymbol.Name;

                var constructorParams = string.Join(", ", properties.Select(p => $"{p.Type.ToDisplayString()} {p.Name.ToLowerInvariant()}"));

                var constructorBody = new StringBuilder();
                foreach (var prop in properties)
                {
                    constructorBody.AppendLine($"            this.{prop.Name} = {prop.Name.ToLowerInvariant()};");
                }

                var sourceCode = $@"// <auto-generated/>
namespace {namespaceName}
{{
    public partial class {className}
    {{
        public {className}({constructorParams})
        {{
{constructorBody}
        }}
    }}
}}
";
                spc.AddSource($"{className}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
            });
        }
    }
}